<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
		http://www.springframework.org/schema/mvc 
		http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-4.2.xsd
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-4.2.xsd " default-lazy-init="true">

	<!-- 加载配置文件
	<context:property-placeholder location="classpath:db.properties"/> -->
	<bean id="springUtil" class="im.dhc.common.utils.SpringUtil" lazy-init="false">
	</bean>
	<!-- 从用户主目录加载数据库配置文件db.properties -->
	<bean id="propertyConfigurer"  class="im.dhc.common.utils.CustomPropertyConfigurer">
    </bean>

	<!--自定义的数据源日志过滤器-->
	<bean id="druidLogFilter" class="im.dhc.common.log.druidLogFilter.Slf4jLogFilter">
	</bean>

<!-- 数据源配置, 使用Druid 数据库连接池 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close"> 
	    <!-- 数据源驱动类可不写，Druid默认会自动根据URL识别DriverClass -->
	    <property name="driverClassName" value="${jdbc.driver}" />
	    
		<!-- 基本属性 url、user、password -->
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${jdbc.pool.init}" />
		<property name="minIdle" value="${jdbc.pool.minIdle}" /> 
		<property name="maxActive" value="${jdbc.pool.maxActive}" />
		
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />
		
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />
		<property name="validationQuery" value="${jdbc.testSql}" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		
		<!-- 打开PSCache，并且指定每个连接上PSCache的大小（Oracle使用）
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize" value="20" /> -->
		
		<!-- 配置监控统计拦截的filters -->
	    <property name="filters" value="stat" />
		<property name="proxyFilters">
			<list>
				<ref bean="druidLogFilter"/>
			</list>
		</property>
	</bean>
	<bean id = "jdbcTemplate"  class = "org.springframework.jdbc.core.JdbcTemplate" > 
         <property name = "dataSource" >
             <ref bean = "dataSource"/>
         </property>
    </bean>
	<!-- 事务管理器 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<!-- 数据源 -->
		<property name="dataSource" ref="dataSource"/>
	</bean>
	<bean id="exector" class="im.dhc.orm.dao.dbexec.SpringExector">
		<property name="jt" ref="jdbcTemplate"/>
	</bean>
	<bean id="dao" class="im.dhc.orm.dao.Dao">
		<property name="exec" ref="exector"/>
	</bean>
	<aop:config>
		<!-- 定义切点，financemanage包及其子包下的所有以Service结尾的类的所有方法-->
		<aop:pointcut id="txPointCut" expression="execution(* *..service..*.*(..))"/>
		<!-- 关联切点和增强，构成切面-->
		<aop:advisor order="1" pointcut-ref="txPointCut" advice-ref="txAdvice"/>
	</aop:config>

	<tx:advice id='txAdvice' transaction-manager="transactionManager">
		<tx:attributes>
            <tx:method name="*" rollback-for="java.lang.Exception" propagation="REQUIRED"/>
			<!--<tx:method name="*Insert*" rollback-for="Exception"/>-->
			<!--<tx:method name="*Modify*" rollback-for="Exception"/>-->
			<!--<tx:method name="*Delete*" rollback-for="Exception"/>-->
			<!--<tx:method name="*Remove*" rollback-for="Exception"/>-->
			<!--<tx:method name="*init*" rollback-for="Exception"/>-->
			<!--<tx:method name="*Init*" rollback-for="Exception"/>-->
		</tx:attributes>
	</tx:advice>


	<bean id="druid-stat-interceptor"
    	class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor">
  	</bean>

	<bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut" scope="prototype">
	    <property name="patterns">
	        <list>
	            <value>financemanage..*</value>
	        </list>
	    </property>
	</bean>
	<aop:config>
	    <aop:advisor advice-ref="druid-stat-interceptor" pointcut-ref="druid-stat-pointcut" />
	</aop:config>

	<!-- 自动扫描包，排除controller以和springmvc整合 -->
	<context:component-scan base-package="im.dhc">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
		<context:exclude-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
		<context:exclude-filter type="annotation" expression="org.springframework.web.bind.annotation.RestController"/>
	</context:component-scan>

	<!--全局异常-->
	<!-- 配置切面的 bean. -->
	<bean id="exAspect" class="im.dhc.common.exception.ExceptionAspect"></bean>

	<!-- 配置 AOP -->
	<aop:config>
		<!-- 配置切点表达式 -->
		<aop:pointcut expression="execution(public * im.dhc..*Service.*(..)) &amp;&amp;  @annotation(breakException)"  id="exPointCut"/>
		<!-- 配置切面及通知 -->
		<aop:aspect ref="exAspect" order="3">
			<aop:after-throwing method="afterThrowing" pointcut-ref="exPointCut" throwing="ex" arg-names="joinPoint,ex,breakException" />
		</aop:aspect>
	</aop:config>

	<!--强制使用CGLIB实现AOP,不然在非接口的泛型注入在使用jdk代理的情况下会失败-->
	<aop:aspectj-autoproxy proxy-target-class="true"/>
</beans>